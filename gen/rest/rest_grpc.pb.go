// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/restaurants/rest.proto

package rest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RestWorkerClient is the client API for RestWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestWorkerClient interface {
	GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RestList, error)
	GetById(ctx context.Context, in *RestId, opts ...grpc.CallOption) (*Rest, error)
	GetByFilter(ctx context.Context, in *Id, opts ...grpc.CallOption) (*RestList, error)
	GetCategoryList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CategoryList, error)
	GetRecomendation(ctx context.Context, in *UserAndLimit, opts ...grpc.CallOption) (*RestList, error)
}

type restWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewRestWorkerClient(cc grpc.ClientConnInterface) RestWorkerClient {
	return &restWorkerClient{cc}
}

func (c *restWorkerClient) GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RestList, error) {
	out := new(RestList)
	err := c.cc.Invoke(ctx, "/rest.RestWorker/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restWorkerClient) GetById(ctx context.Context, in *RestId, opts ...grpc.CallOption) (*Rest, error) {
	out := new(Rest)
	err := c.cc.Invoke(ctx, "/rest.RestWorker/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restWorkerClient) GetByFilter(ctx context.Context, in *Id, opts ...grpc.CallOption) (*RestList, error) {
	out := new(RestList)
	err := c.cc.Invoke(ctx, "/rest.RestWorker/GetByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restWorkerClient) GetCategoryList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CategoryList, error) {
	out := new(CategoryList)
	err := c.cc.Invoke(ctx, "/rest.RestWorker/GetCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restWorkerClient) GetRecomendation(ctx context.Context, in *UserAndLimit, opts ...grpc.CallOption) (*RestList, error) {
	out := new(RestList)
	err := c.cc.Invoke(ctx, "/rest.RestWorker/GetRecomendation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestWorkerServer is the server API for RestWorker service.
// All implementations must embed UnimplementedRestWorkerServer
// for forward compatibility
type RestWorkerServer interface {
	GetAll(context.Context, *Empty) (*RestList, error)
	GetById(context.Context, *RestId) (*Rest, error)
	GetByFilter(context.Context, *Id) (*RestList, error)
	GetCategoryList(context.Context, *Empty) (*CategoryList, error)
	GetRecomendation(context.Context, *UserAndLimit) (*RestList, error)
	mustEmbedUnimplementedRestWorkerServer()
}

// UnimplementedRestWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedRestWorkerServer struct {
}

func (UnimplementedRestWorkerServer) GetAll(context.Context, *Empty) (*RestList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedRestWorkerServer) GetById(context.Context, *RestId) (*Rest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedRestWorkerServer) GetByFilter(context.Context, *Id) (*RestList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByFilter not implemented")
}
func (UnimplementedRestWorkerServer) GetCategoryList(context.Context, *Empty) (*CategoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryList not implemented")
}
func (UnimplementedRestWorkerServer) GetRecomendation(context.Context, *UserAndLimit) (*RestList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecomendation not implemented")
}
func (UnimplementedRestWorkerServer) mustEmbedUnimplementedRestWorkerServer() {}

// UnsafeRestWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestWorkerServer will
// result in compilation errors.
type UnsafeRestWorkerServer interface {
	mustEmbedUnimplementedRestWorkerServer()
}

func RegisterRestWorkerServer(s grpc.ServiceRegistrar, srv RestWorkerServer) {
	s.RegisterService(&RestWorker_ServiceDesc, srv)
}

func _RestWorker_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestWorkerServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rest.RestWorker/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestWorkerServer).GetAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestWorker_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestWorkerServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rest.RestWorker/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestWorkerServer).GetById(ctx, req.(*RestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestWorker_GetByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestWorkerServer).GetByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rest.RestWorker/GetByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestWorkerServer).GetByFilter(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestWorker_GetCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestWorkerServer).GetCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rest.RestWorker/GetCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestWorkerServer).GetCategoryList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestWorker_GetRecomendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAndLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestWorkerServer).GetRecomendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rest.RestWorker/GetRecomendation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestWorkerServer).GetRecomendation(ctx, req.(*UserAndLimit))
	}
	return interceptor(ctx, in, info, handler)
}

// RestWorker_ServiceDesc is the grpc.ServiceDesc for RestWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RestWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rest.RestWorker",
	HandlerType: (*RestWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _RestWorker_GetAll_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _RestWorker_GetById_Handler,
		},
		{
			MethodName: "GetByFilter",
			Handler:    _RestWorker_GetByFilter_Handler,
		},
		{
			MethodName: "GetCategoryList",
			Handler:    _RestWorker_GetCategoryList_Handler,
		},
		{
			MethodName: "GetRecomendation",
			Handler:    _RestWorker_GetRecomendation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/restaurants/rest.proto",
}
