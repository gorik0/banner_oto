// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/user/user.proto

package user

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserManagerClient is the client API for UserManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagerClient interface {
	GetData(ctx context.Context, in *Email, opts ...grpc.CallOption) (*User, error)
	UpdateData(ctx context.Context, in *UpdateUserData, opts ...grpc.CallOption) (*User, error)
	UpdateAddress(ctx context.Context, in *AddressData, opts ...grpc.CallOption) (*empty.Empty, error)
	SetNewPassword(ctx context.Context, in *PasswordsChange, opts ...grpc.CallOption) (*empty.Empty, error)
	Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	IsPassswordEquals(ctx context.Context, in *PasswordCheck, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	UpdateAddressByUnauthId(ctx context.Context, in *AddressDataUnauth, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAddressByUnauthId(ctx context.Context, in *UnauthId, opts ...grpc.CallOption) (*Address, error)
}

type userManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagerClient(cc grpc.ClientConnInterface) UserManagerClient {
	return &userManagerClient{cc}
}

func (c *userManagerClient) GetData(ctx context.Context, in *Email, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user.UserManager/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) UpdateData(ctx context.Context, in *UpdateUserData, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user.UserManager/UpdateData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) UpdateAddress(ctx context.Context, in *AddressData, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user.UserManager/UpdateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) SetNewPassword(ctx context.Context, in *PasswordsChange, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user.UserManager/SetNewPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user.UserManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) IsPassswordEquals(ctx context.Context, in *PasswordCheck, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/user.UserManager/IsPassswordEquals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) UpdateAddressByUnauthId(ctx context.Context, in *AddressDataUnauth, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/user.UserManager/UpdateAddressByUnauthId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) GetAddressByUnauthId(ctx context.Context, in *UnauthId, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/user.UserManager/GetAddressByUnauthId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagerServer is the server API for UserManager service.
// All implementations must embed UnimplementedUserManagerServer
// for forward compatibility
type UserManagerServer interface {
	GetData(context.Context, *Email) (*User, error)
	UpdateData(context.Context, *UpdateUserData) (*User, error)
	UpdateAddress(context.Context, *AddressData) (*empty.Empty, error)
	SetNewPassword(context.Context, *PasswordsChange) (*empty.Empty, error)
	Create(context.Context, *User) (*User, error)
	IsPassswordEquals(context.Context, *PasswordCheck) (*wrappers.BoolValue, error)
	UpdateAddressByUnauthId(context.Context, *AddressDataUnauth) (*empty.Empty, error)
	GetAddressByUnauthId(context.Context, *UnauthId) (*Address, error)
	mustEmbedUnimplementedUserManagerServer()
}

// UnimplementedUserManagerServer must be embedded to have forward compatible implementations.
type UnimplementedUserManagerServer struct {
}

func (UnimplementedUserManagerServer) GetData(context.Context, *Email) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedUserManagerServer) UpdateData(context.Context, *UpdateUserData) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateData not implemented")
}
func (UnimplementedUserManagerServer) UpdateAddress(context.Context, *AddressData) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddress not implemented")
}
func (UnimplementedUserManagerServer) SetNewPassword(context.Context, *PasswordsChange) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNewPassword not implemented")
}
func (UnimplementedUserManagerServer) Create(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserManagerServer) IsPassswordEquals(context.Context, *PasswordCheck) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPassswordEquals not implemented")
}
func (UnimplementedUserManagerServer) UpdateAddressByUnauthId(context.Context, *AddressDataUnauth) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddressByUnauthId not implemented")
}
func (UnimplementedUserManagerServer) GetAddressByUnauthId(context.Context, *UnauthId) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressByUnauthId not implemented")
}
func (UnimplementedUserManagerServer) mustEmbedUnimplementedUserManagerServer() {}

// UnsafeUserManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagerServer will
// result in compilation errors.
type UnsafeUserManagerServer interface {
	mustEmbedUnimplementedUserManagerServer()
}

func RegisterUserManagerServer(s grpc.ServiceRegistrar, srv UserManagerServer) {
	s.RegisterService(&UserManager_ServiceDesc, srv)
}

func _UserManager_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserManager/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).GetData(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_UpdateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).UpdateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserManager/UpdateData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).UpdateData(ctx, req.(*UpdateUserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_UpdateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).UpdateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserManager/UpdateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).UpdateAddress(ctx, req.(*AddressData))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_SetNewPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordsChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).SetNewPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserManager/SetNewPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).SetNewPassword(ctx, req.(*PasswordsChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).Create(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_IsPassswordEquals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).IsPassswordEquals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserManager/IsPassswordEquals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).IsPassswordEquals(ctx, req.(*PasswordCheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_UpdateAddressByUnauthId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressDataUnauth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).UpdateAddressByUnauthId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserManager/UpdateAddressByUnauthId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).UpdateAddressByUnauthId(ctx, req.(*AddressDataUnauth))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_GetAddressByUnauthId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnauthId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).GetAddressByUnauthId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserManager/GetAddressByUnauthId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).GetAddressByUnauthId(ctx, req.(*UnauthId))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManager_ServiceDesc is the grpc.ServiceDesc for UserManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserManager",
	HandlerType: (*UserManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _UserManager_GetData_Handler,
		},
		{
			MethodName: "UpdateData",
			Handler:    _UserManager_UpdateData_Handler,
		},
		{
			MethodName: "UpdateAddress",
			Handler:    _UserManager_UpdateAddress_Handler,
		},
		{
			MethodName: "SetNewPassword",
			Handler:    _UserManager_SetNewPassword_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _UserManager_Create_Handler,
		},
		{
			MethodName: "IsPassswordEquals",
			Handler:    _UserManager_IsPassswordEquals_Handler,
		},
		{
			MethodName: "UpdateAddressByUnauthId",
			Handler:    _UserManager_UpdateAddressByUnauthId_Handler,
		},
		{
			MethodName: "GetAddressByUnauthId",
			Handler:    _UserManager_GetAddressByUnauthId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user/user.proto",
}
