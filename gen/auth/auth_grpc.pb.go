// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/auth/auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthManagerClient is the client API for AuthManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthManagerClient interface {
	SignIn(ctx context.Context, in *SignInCredentials, opts ...grpc.CallOption) (*User, error)
	SignUp(ctx context.Context, in *SignUpCredentials, opts ...grpc.CallOption) (*User, error)
}

type authManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthManagerClient(cc grpc.ClientConnInterface) AuthManagerClient {
	return &authManagerClient{cc}
}

func (c *authManagerClient) SignIn(ctx context.Context, in *SignInCredentials, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/auth.AuthManager/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authManagerClient) SignUp(ctx context.Context, in *SignUpCredentials, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/auth.AuthManager/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthManagerServer is the server API for AuthManager service.
// All implementations must embed UnimplementedAuthManagerServer
// for forward compatibility
type AuthManagerServer interface {
	SignIn(context.Context, *SignInCredentials) (*User, error)
	SignUp(context.Context, *SignUpCredentials) (*User, error)
	mustEmbedUnimplementedAuthManagerServer()
}

// UnimplementedAuthManagerServer must be embedded to have forward compatible implementations.
type UnimplementedAuthManagerServer struct {
}

func (UnimplementedAuthManagerServer) SignIn(context.Context, *SignInCredentials) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedAuthManagerServer) SignUp(context.Context, *SignUpCredentials) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedAuthManagerServer) mustEmbedUnimplementedAuthManagerServer() {}

// UnsafeAuthManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthManagerServer will
// result in compilation errors.
type UnsafeAuthManagerServer interface {
	mustEmbedUnimplementedAuthManagerServer()
}

func RegisterAuthManagerServer(s grpc.ServiceRegistrar, srv AuthManagerServer) {
	s.RegisterService(&AuthManager_ServiceDesc, srv)
}

func _AuthManager_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManager/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServer).SignIn(ctx, req.(*SignInCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthManager_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthManagerServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthManager/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthManagerServer).SignUp(ctx, req.(*SignUpCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthManager_ServiceDesc is the grpc.ServiceDesc for AuthManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthManager",
	HandlerType: (*AuthManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _AuthManager_SignIn_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _AuthManager_SignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth/auth.proto",
}
